name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci --legacy-peer-deps
        
    - name: Run npm audit
      run: |
        cd backend
        npm audit --audit-level=moderate --json > audit-report.json || true
        
    - name: Check for high/critical vulnerabilities
      run: |
        cd backend
        CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
        HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
        
        echo "Critical vulnerabilities: $CRITICAL"
        echo "High vulnerabilities: $HIGH"
        
        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 5 ]; then
          echo "❌ Security scan failed: Too many high/critical vulnerabilities"
          exit 1
        else
          echo "✅ Security scan passed: Acceptable vulnerability levels"
        fi
        
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-audit-report
        path: backend/audit-report.json

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  code-quality-scan:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci --legacy-peer-deps
        
    - name: Run ESLint security rules
      run: |
        cd backend
        npx eslint . --ext .js --format json --output-file eslint-report.json || true
        
    - name: Install and run Semgrep
      run: |
        python3 -m pip install semgrep
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Check security issues
      run: |
        # Check ESLint security issues
        if [ -f backend/eslint-report.json ]; then
          ESLINT_ERRORS=$(cat backend/eslint-report.json | jq '[.[] | .messages[] | select(.ruleId | test("security"))] | length')
          echo "ESLint security issues: $ESLINT_ERRORS"
        fi
        
        # Check Semgrep security issues
        if [ -f semgrep-report.json ]; then
          SEMGREP_ERRORS=$(cat semgrep-report.json | jq '.results | length')
          echo "Semgrep security issues: $SEMGREP_ERRORS"
          
          if [ "$SEMGREP_ERRORS" -gt 10 ]; then
            echo "❌ Too many security issues found by Semgrep"
            exit 1
          fi
        fi
        
        echo "✅ Code quality scan completed"
        
    - name: Upload scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          backend/eslint-report.json
          semgrep-report.json

  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        cd backend
        docker build -t strategyzer-ai:security-test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'strategyzer-ai:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-report.sarif
        
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-report.sarif

  security-test:
    name: Security Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run security tests
      run: |
        cd backend
        npm test -- __tests__/unit/services/securityServices.test.js
        npm test -- __tests__/unit/services/securityScanner.test.js
        
    - name: Generate security test report
      run: |
        cd backend
        npm test -- --reporter=json --outputFile=security-test-results.json __tests__/unit/services/security*.test.js || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: backend/security-test-results.json

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Check GDPR compliance
      run: |
        echo "🔍 Checking GDPR compliance..."
        
        # Check for PII handling
        if grep -r "PIIHandlingService" backend/services/; then
          echo "✅ PII handling service found"
        else
          echo "❌ PII handling service missing"
          exit 1
        fi
        
        # Check for consent management
        if grep -r "recordConsent\|checkConsent" backend/services/; then
          echo "✅ Consent management found"
        else
          echo "❌ Consent management missing"
          exit 1
        fi
        
        # Check for right to be forgotten
        if grep -r "rightToBeForgotten\|deletePersonalData" backend/services/; then
          echo "✅ Right to be forgotten implementation found"
        else
          echo "❌ Right to be forgotten implementation missing"
          exit 1
        fi
        
    - name: Check SOX compliance
      run: |
        echo "🔍 Checking SOX compliance..."
        
        # Check for audit logging
        if grep -r "AuditLoggingService" backend/services/; then
          echo "✅ Audit logging service found"
        else
          echo "❌ Audit logging service missing"
          exit 1
        fi
        
        # Check for access controls
        if grep -r "requirePermission\|checkPermission" backend/middleware/; then
          echo "✅ Access control implementation found"
        else
          echo "❌ Access control implementation missing"
          exit 1
        fi
        
    - name: Check OWASP compliance
      run: |
        echo "🔍 Checking OWASP Top 10 compliance..."
        
        # A01: Broken Access Control
        if grep -r "authenticateJWT\|requirePermission" backend/; then
          echo "✅ A01: Access control implementation found"
        else
          echo "❌ A01: Access control implementation missing"
          exit 1
        fi
        
        # A02: Cryptographic Failures
        if grep -r "EncryptionService\|encrypt\|decrypt" backend/services/; then
          echo "✅ A02: Encryption implementation found"
        else
          echo "❌ A02: Encryption implementation missing"
          exit 1
        fi
        
        # A03: Injection
        if grep -r "sanitize\|validate" backend/middleware/; then
          echo "✅ A03: Input validation found"
        else
          echo "❌ A03: Input validation missing"
          exit 1
        fi

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-quality-scan, docker-security-scan, infrastructure-scan, security-test, compliance-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job statuses
        echo "| Scan Type | Status |" >> security-summary.md
        echo "|-----------|--------|" >> security-summary.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Code Quality | ${{ needs.code-quality-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Docker Security | ${{ needs.docker-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Infrastructure | ${{ needs.infrastructure-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Security Tests | ${{ needs.security-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "| Compliance Check | ${{ needs.compliance-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
        echo "" >> security-summary.md
        
        # Overall status
        if [[ "${{ needs.dependency-scan.result }}" == "success" && 
              "${{ needs.secret-scan.result }}" == "success" && 
              "${{ needs.security-test.result }}" == "success" && 
              "${{ needs.compliance-check.result }}" == "success" ]]; then
          echo "## ✅ Overall Status: PASSED" >> security-summary.md
          echo "" >> security-summary.md
          echo "All critical security scans have passed. The application meets security requirements." >> security-summary.md
        else
          echo "## ❌ Overall Status: FAILED" >> security-summary.md
          echo "" >> security-summary.md
          echo "One or more critical security scans have failed. Please review the results and address issues." >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "- Review all scan reports for detailed findings" >> security-summary.md
        echo "- Address any high or critical vulnerabilities immediately" >> security-summary.md
        echo "- Update dependencies with known vulnerabilities" >> security-summary.md
        echo "- Ensure all security tests pass before deployment" >> security-summary.md
        echo "- Schedule regular security scans" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
