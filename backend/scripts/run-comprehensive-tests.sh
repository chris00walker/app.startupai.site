#!/bin/bash

# Comprehensive Test Runner for Strategyzer AI Platform
# Executes TDD/BDD test suite on Google Cloud Platform

set -e  # Exit on any error

echo "üöÄ Starting Comprehensive Test Suite for Strategyzer AI Platform"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results tracking
UNIT_TESTS_PASSED=false
INTEGRATION_TESTS_PASSED=false
E2E_TESTS_PASSED=false
COVERAGE_THRESHOLD=80

echo -e "${BLUE}üìã Test Environment Information${NC}"
echo "Node.js Version: $(node --version)"
echo "NPM Version: $(npm --version)"
echo "Platform: $(uname -s)"
echo "Architecture: $(uname -m)"
echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}' || echo 'N/A')"
echo "CPU Cores: $(nproc || echo 'N/A')"
echo ""

# Check if OpenAI API key is available (required for integration tests)
if [ -z "$OPENAI_API_KEY" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: OPENAI_API_KEY not set. Some integration tests may be skipped.${NC}"
fi

echo -e "${BLUE}üß™ Phase 1: Unit Tests${NC}"
echo "Testing Strategyzer agent prompt generation and utilities..."
if npm run test:unit -- --reporter=verbose; then
    echo -e "${GREEN}‚úÖ Unit tests passed!${NC}"
    UNIT_TESTS_PASSED=true
else
    echo -e "${RED}‚ùå Unit tests failed!${NC}"
    echo "Unit test failures detected. Continuing with other tests..."
fi
echo ""

echo -e "${BLUE}üîó Phase 2: Integration Tests${NC}"
echo "Testing Strategyzer workflow orchestration and database integration..."
if npm run test:integration -- --reporter=verbose; then
    echo -e "${GREEN}‚úÖ Integration tests passed!${NC}"
    INTEGRATION_TESTS_PASSED=true
else
    echo -e "${RED}‚ùå Integration tests failed!${NC}"
    echo "Integration test failures detected. Continuing with E2E tests..."
fi
echo ""

echo -e "${BLUE}üåê Phase 3: End-to-End Tests${NC}"
echo "Testing complete Strategyzer consulting scenarios..."
if npm run test:e2e -- --reporter=verbose; then
    echo -e "${GREEN}‚úÖ End-to-end tests passed!${NC}"
    E2E_TESTS_PASSED=true
else
    echo -e "${RED}‚ùå End-to-end tests failed!${NC}"
    echo "E2E test failures detected."
fi
echo ""

echo -e "${BLUE}üìä Phase 4: Code Coverage Analysis${NC}"
echo "Generating comprehensive code coverage report..."
if npm run test:coverage -- --reporter=verbose; then
    echo -e "${GREEN}‚úÖ Coverage analysis completed!${NC}"
    
    # Extract coverage percentage (this might need adjustment based on actual output format)
    COVERAGE_PERCENT=$(npm run test:coverage 2>/dev/null | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | tail -1 || echo "0")
    
    if [ -n "$COVERAGE_PERCENT" ]; then
        echo "Current code coverage: ${COVERAGE_PERCENT}%"
        if (( $(echo "$COVERAGE_PERCENT >= $COVERAGE_THRESHOLD" | bc -l) )); then
            echo -e "${GREEN}‚úÖ Coverage meets threshold (${COVERAGE_THRESHOLD}%)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Coverage below threshold (${COVERAGE_THRESHOLD}%). Current: ${COVERAGE_PERCENT}%${NC}"
        fi
    fi
else
    echo -e "${RED}‚ùå Coverage analysis failed!${NC}"
fi
echo ""

echo -e "${BLUE}üîç Phase 5: Strategyzer Framework Validation${NC}"
echo "Validating Strategyzer methodology implementation..."

# Custom validation tests for Strategyzer frameworks
echo "Checking Value Proposition Canvas structure..."
if node -e "
const { buildValuePropositionPrompt } = require('./server/utils/agentRunner.js');
const prompt = buildValuePropositionPrompt({ clientId: 'test' });
const hasRequiredElements = prompt.includes('Customer Profile') && 
                           prompt.includes('Value Map') && 
                           prompt.includes('Pain Relievers') && 
                           prompt.includes('Gain Creators');
if (!hasRequiredElements) {
  console.error('‚ùå Value Proposition Canvas prompt missing required elements');
  process.exit(1);
}
console.log('‚úÖ Value Proposition Canvas structure validated');
"; then
    echo -e "${GREEN}‚úÖ Value Proposition Canvas validation passed${NC}"
else
    echo -e "${RED}‚ùå Value Proposition Canvas validation failed${NC}"
fi

echo "Checking Business Model Canvas elements..."
if node -e "
const { buildStrategyzerPrompt } = require('./server/utils/agentRunner.js');
const prompt = buildStrategyzerPrompt('businessModelAgent', { clientId: 'test' });
const hasBusinessElements = prompt.includes('business model') || prompt.includes('Strategyzer');
if (!hasBusinessElements) {
  console.error('‚ùå Business Model prompt missing Strategyzer elements');
  process.exit(1);
}
console.log('‚úÖ Business Model Canvas structure validated');
"; then
    echo -e "${GREEN}‚úÖ Business Model Canvas validation passed${NC}"
else
    echo -e "${RED}‚ùå Business Model Canvas validation failed${NC}"
fi

echo "Checking Testing Business Ideas framework..."
if node -e "
const { buildTestingBusinessIdeasPrompt } = require('./server/utils/agentRunner.js');
const prompt = buildTestingBusinessIdeasPrompt({ clientId: 'test' });
const hasTestingElements = prompt.includes('Testing Business Ideas') && 
                          prompt.includes('hypotheses') && 
                          prompt.includes('experiments');
if (!hasTestingElements) {
  console.error('‚ùå Testing Business Ideas prompt missing required elements');
  process.exit(1);
}
console.log('‚úÖ Testing Business Ideas framework validated');
"; then
    echo -e "${GREEN}‚úÖ Testing Business Ideas validation passed${NC}"
else
    echo -e "${RED}‚ùå Testing Business Ideas validation failed${NC}"
fi
echo ""

echo -e "${BLUE}üìà Test Results Summary${NC}"
echo "=================================================="
echo -e "Unit Tests:        $([ "$UNIT_TESTS_PASSED" = true ] && echo -e "${GREEN}PASSED${NC}" || echo -e "${RED}FAILED${NC}")"
echo -e "Integration Tests: $([ "$INTEGRATION_TESTS_PASSED" = true ] && echo -e "${GREEN}PASSED${NC}" || echo -e "${RED}FAILED${NC}")"
echo -e "E2E Tests:         $([ "$E2E_TESTS_PASSED" = true ] && echo -e "${GREEN}PASSED${NC}" || echo -e "${RED}FAILED${NC}")"
echo ""

# Overall test result
if [ "$UNIT_TESTS_PASSED" = true ] && [ "$INTEGRATION_TESTS_PASSED" = true ] && [ "$E2E_TESTS_PASSED" = true ]; then
    echo -e "${GREEN}üéâ ALL TESTS PASSED! Strategyzer AI Platform is ready for deployment.${NC}"
    echo ""
    echo -e "${BLUE}‚ú® Key Validations Completed:${NC}"
    echo "‚Ä¢ Strategyzer framework prompt generation"
    echo "‚Ä¢ Value Proposition Canvas creation"
    echo "‚Ä¢ Business Model Canvas generation"
    echo "‚Ä¢ Testing Business Ideas methodology"
    echo "‚Ä¢ Multi-agent workflow orchestration"
    echo "‚Ä¢ Database integration and persistence"
    echo "‚Ä¢ End-to-end consulting scenarios"
    echo ""
    exit 0
else
    echo -e "${RED}‚ùå SOME TESTS FAILED! Review the failures above before deployment.${NC}"
    echo ""
    echo -e "${YELLOW}üîß Recommended Actions:${NC}"
    if [ "$UNIT_TESTS_PASSED" = false ]; then
        echo "‚Ä¢ Fix unit test failures in Strategyzer agent utilities"
    fi
    if [ "$INTEGRATION_TESTS_PASSED" = false ]; then
        echo "‚Ä¢ Debug integration issues with workflow orchestration"
    fi
    if [ "$E2E_TESTS_PASSED" = false ]; then
        echo "‚Ä¢ Resolve end-to-end scenario failures"
    fi
    echo "‚Ä¢ Review logs above for specific error details"
    echo "‚Ä¢ Ensure OpenAI API key is properly configured"
    echo "‚Ä¢ Verify MongoDB connection and schema"
    echo ""
    exit 1
fi
